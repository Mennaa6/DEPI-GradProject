import React from "react";
import { useNavigate } from "react-router-dom";
import {
  FaEye,
  FaEdit,
  FaTrash,
  FaSort,
  FaSortUp,
  FaSortDown,
} from "react-icons/fa";

const ProductsTable = ({
  products,
  sortBy,
  sortOrder,
  handleSort,
  confirmDelete,
}) => {
  const navigate = useNavigate();

  // Get sort icon
  const getSortIcon = (key) => {
    if (sortBy !== key) return <FaSort className="text-gray-400" />;
    if (sortOrder === "asc") return <FaSortUp className="text-blue-500" />;
    return <FaSortDown className="text-blue-500" />;
  };

  return (
    <>
      {/* Desktop View */}
      <div className="hidden md:block overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Product
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                onClick={() => handleSort("category")}
              >
                <div className="flex items-center space-x-1">
                  <span>Category</span>
                  {getSortIcon("category")}
                </div>
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                onClick={() => handleSort("price")}
              >
                <div className="flex items-center space-x-1">
                  <span>Price</span>
                  {getSortIcon("price")}
                </div>
              </th>
              <th
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer"
                onClick={() => handleSort("stock")}
              >
                <div className="flex items-center space-x-1">
                  <span>Stock</span>
                  {getSortIcon("stock")}
                </div>
              </th>
              <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {products.map((product) => (
              <tr
                key={product._id}
                className="hover:bg-gray-50 transition-colors"
              >
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="flex items-center">
                    <div className="w-10 h-10 flex-shrink-0 rounded-md overflow-hidden">
                      <img
                        src={product.image}
                        alt=""
                        className="w-full h-full object-cover"
                        onError={(e) => {
                          e.target.onerror = null;
                          e.target.src =
                            "https://via.placeholder.com/150?text=No+Image";
                        }}
                      />
                    </div>
                    <div className="ml-4">
                      <div className="font-medium text-gray-900">
                        {product.name}
                      </div>
                    </div>
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span className="px-2 py-1 text-xs font-medium rounded-full bg-blue-50 text-blue-700">
                    {product.category}
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  $
                  {typeof product.price === "number"
                    ? product.price.toFixed(2)
                    : product.price}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  {product.stock > 10 ? (
                    <span className="px-2 py-1 text-xs font-medium rounded-full bg-green-50 text-green-700">
                      In Stock ({product.stock})
                    </span>
                  ) : product.stock > 0 ? (
                    <span className="px-2 py-1 text-xs font-medium rounded-full bg-yellow-50 text-yellow-700">
                      Low Stock ({product.stock})
                    </span>
                  ) : (
                    <span className="px-2 py-1 text-xs font-medium rounded-full bg-red-50 text-red-700">
                      Out of Stock
                    </span>
                  )}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <div className="flex justify-end space-x-2">
                    <button
                      onClick={() => navigate(`/products/${product._id}`)}
                      className="text-gray-600 hover:text-gray-900 transition-colors"
                      aria-label="View product"
                    >
                      <FaEye size={16} />
                    </button>
                    <button
                      onClick={() =>
                        navigate(`/admin/products/${product._id}/edit`)
                      }
                      className="text-blue-600 hover:text-blue-900 transition-colors"
                      aria-label="Edit product"
                    >
                      <FaEdit size={16} />
                    </button>
                    <button
                      onClick={() => confirmDelete(product)}
                      className="text-red-600 hover:text-red-900 transition-colors"
                      aria-label="Delete product"
                    >
                      <FaTrash size={16} />
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Mobile View */}
      <div className="md:hidden">
        {products.map((product) => (
          <div key={product._id} className="border-b border-gray-200 py-4">
            <div className="flex items-start">
              <div className="w-16 h-16 flex-shrink-0 rounded-md overflow-hidden">
                <img
                  src={product.image}
                  alt=""
                  className="w-full h-full object-cover"
                  onError={(e) => {
                    e.target.onerror = null;
                    e.target.src =
                      "https://via.placeholder.com/150?text=No+Image";
                  }}
                />
              </div>
              <div className="ml-4 flex-1">
                <div className="font-medium text-gray-900">{product.name}</div>
                <div className="flex items-center mt-1">
                  <span className="px-2 py-0.5 text-xs font-medium rounded-full bg-blue-50 text-blue-700">
                    {product.category}
                  </span>
                  <span className="ml-2 text-sm text-gray-500">
                    $
                    {typeof product.price === "number"
                      ? product.price.toFixed(2)
                      : product.price}
                  </span>
                </div>
                <div className="mt-2">
                  {product.stock > 10 ? (
                    <span className="px-2 py-0.5 text-xs font-medium rounded-full bg-green-50 text-green-700">
                      In Stock ({product.stock})
                    </span>
                  ) : product.stock > 0 ? (
                    <span className="px-2 py-0.5 text-xs font-medium rounded-full bg-yellow-50 text-yellow-700">
                      Low Stock ({product.stock})
                    </span>
                  ) : (
                    <span className="px-2 py-0.5 text-xs font-medium rounded-full bg-red-50 text-red-700">
                      Out of Stock
                    </span>
                  )}
                </div>
              </div>
              <div className="flex space-x-2">
                <button
                  onClick={() => navigate(`/products/${product._id}`)}
                  className="p-1.5 rounded text-gray-600 hover:text-gray-900 hover:bg-gray-100 transition-colors"
                  aria-label="View product"
                >
                  <FaEye size={15} />
                </button>
                <button
                  onClick={() =>
                    navigate(`/admin/products/${product._id}/edit`)
                  }
                  className="p-1.5 rounded text-blue-600 hover:text-blue-900 hover:bg-blue-50 transition-colors"
                  aria-label="Edit product"
                >
                  <FaEdit size={15} />
                </button>
                <button
                  onClick={() => confirmDelete(product)}
                  className="p-1.5 rounded text-red-600 hover:text-red-900 hover:bg-red-50 transition-colors"
                  aria-label="Delete product"
                >
                  <FaTrash size={15} />
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </>
  );
};

export default ProductsTable;
